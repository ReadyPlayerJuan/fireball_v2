

varying vec2 v_texCoords;
varying vec4 v_color;



/*                              */
/*       NOISE GENERATION       */
/*                              */
vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2, p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}


/*                              */
/*         ACTUAL SCRIPT        */
/*                              */
uniform sampler2D u_texture;

uniform float u_time;
uniform vec2 u_camera_position;
uniform vec2 u_surface_size;
uniform float u_obstruction_offset;
uniform sampler2D u_obstruction;

const vec2 read_noise_magnification = vec2(2.0, 3.0) * 0.02;
const vec2 color_noise_magnification = vec2(2.0, 3.0) * 0.025;
const float max_read_shift_x = 1.8;
const float max_read_shift_y = 0.9;
const float read_shift_rise_speed = 2.8;
const float read_shift_noise_3d_speed = 1.0;
const float color_noise_3d_speed = 2.0;

const float red_boost = 0.05;
const float num_cels = 6.0;
const float dither_amount = 0.10;

void main()
{
	vec2 pixel_size = 1.0 / u_surface_size;
	vec2 world_position = v_texCoords + u_camera_position;
	vec2 scaled_tex_coord = vec2(world_position.x * read_noise_magnification.x / pixel_size.x, world_position.y * read_noise_magnification.y / pixel_size.y);

	float noise_range = snoise(vec3(scaled_tex_coord + vec2(0.0, read_shift_rise_speed * u_time), u_time * read_shift_noise_3d_speed));
	float noise = (noise_range * 0.5) + 0.5;
	vec2 read_shift = vec2(max_read_shift_x * noise_range * pixel_size.x, max_read_shift_y * noise_range * pixel_size.y);

	vec4 tex_color = texture2D(u_texture, clamp(v_texCoords + read_shift, 0.0, 1.0));

    float fire_amount_noise_range = noise_range;//snoise(vec3(scaled_tex_coord + vec2(10.0, read_shift_rise_speed * u_time), u_time * read_shift_noise_3d_speed));
	float fire_amount_noise = (fire_amount_noise_range * 0.5) + 0.5;

	float fire_amount = (tex_color.r * 5.0 - pow(fire_amount_noise, 5.0) * 2.0) + 0.3;
	if(tex_color.r < 0.01) {
		fire_amount = 0.0;
	}


	vec2 color_scaled_tex_coord = vec2(world_position.x * color_noise_magnification.x / pixel_size.x, world_position.y * color_noise_magnification.y / pixel_size.y);
    float color_noise_range = snoise(vec3(color_scaled_tex_coord + vec2((560.0/99.0), (129.0/12.0) + read_shift_rise_speed * u_time), u_time * color_noise_3d_speed));
    float base_color_amount = mix(tex_color.r, texture2D(u_texture, v_texCoords).r, 0.6);// + (color_noise * 0.0) + (fire_amount_noise_range * 0.5);

	float color_amount = mix(-0.3, 0.9, (1.0 - pow(1.0 - base_color_amount, 2.0)));
	color_amount += color_noise_range * 0.3 * (1.0 - (abs(base_color_amount - 0.5) * 2.0));

    float color_noise_range_2 = snoise(vec3(color_scaled_tex_coord * 2.0 + vec2((560.0/99.0), (129.0/12.0) + read_shift_rise_speed * 3.0 * u_time), u_time * color_noise_3d_speed * 0.9));
	float n = pow(clamp(1.0 - color_amount, 0.0, 1.0), 3.0);
	color_amount += n * (0.4 * pow(color_noise_range_2 * 0.5 + 0.5, 3.0));

	vec3 out_color;



	// MORE RED
	color_amount = mix(-red_boost, 1.0, color_amount);

	// DITHERING
	float even_pixel = mod(floor(world_position.x / pixel_size.x) + floor(world_position.y / pixel_size.y), 2.0);
	color_amount += (dither_amount / num_cels) * (float(even_pixel) - 0.5);

	// CEL SHADING
	color_amount = floor(color_amount * num_cels) / (num_cels - 1.0);

	// COLOR
	out_color = vec3(1.0, color_amount, 0.0);


	//vec2 obstruction_tex_coords = (v_texCoords * (1.0 + u_obstruction_offset)) - vec2(u_obstruction_offset / 2.0);
	//float obstruction = max(0.0, texture2D(u_obstruction, obstruction_tex_coords).r - (tex_color.g * 3.0));

	float alpha = min(1.0, fire_amount);// - obstruction;

	// SMOKY EDGES
	///*
	out_color = pow(min(1.0, fire_amount), 2.0) * out_color;
	alpha = 1.0 - pow(1.0 - alpha, 2.0);
	//*/

	gl_FragColor = vec4(out_color, alpha);

	//gl_FragColor = vec4(pow((noise + fire_amount_noise) / 2.0, 4.0), 0.0, 0.0, 1.0);
}
