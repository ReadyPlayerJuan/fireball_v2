

varying vec2 v_texCoords;
varying vec4 v_color;

uniform sampler2D u_texture;

uniform sampler2D u_previous_frame;
uniform vec2 u_camera_delta;
uniform vec2 u_camera_position;
uniform vec2 u_surface_size;
uniform float u_time;
uniform float u_random;
uniform float u_freeze;

const float residual_fire_fade_time = 0.059; //time fire takes to fade
const float residual_rise_speed = 1.85; //speed that fire rises
const float check_distance = 2.9; //distance that fire residual decreases by each frame
const float max_residual = 0.6; //max color that a residual can be

const vec2 noise_magnification = vec2(2.4, 3.5) * 0.03;
const float noise_rise_speed = 4.0;
const float noise_3d_speed = 1.0;
const float fade_max_variation = 0.9; //increase for higher, more erratic flames


/*                              */
/*       NOISE GENERATION       */
/*                              */
vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2, p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}



/*                              */
/*         ACTUAL SCRIPT        */
/*                              */
void main() {
	if(u_freeze == 1.0) {
		gl_FragColor = vec4(texture2D(u_previous_frame, v_texCoords).rgb, 1.0);
	} else {
		vec2 pixel_size = 1.0 / u_surface_size;
		vec2 tex_coords = v_texCoords + u_camera_delta;
		vec2 world_position = v_texCoords + u_camera_position - u_camera_delta;
		vec2 noise_tex_coord = vec2(world_position.x * noise_magnification.x / pixel_size.x, world_position.y * noise_magnification.y / pixel_size.y);
		float noise_range = snoise(vec3(noise_tex_coord + vec2(0.0, noise_rise_speed * u_time), u_time * noise_3d_speed));
		float noise = (noise_range * 0.5) + 0.5;

		vec4 texture_raw = texture2D(u_texture, tex_coords);

		float rise = residual_rise_speed * pixel_size.y * (1.0 + ((u_random - 0.5) * 0.1));
		vec2 rise_offset = vec2(0.0, rise);

		float fire_residual = 0.0;
		float dist = check_distance * pixel_size.x * (1.0 + ((u_random - 0.5) * 0.05));

		for(int i = 0; i < 4; i++) {
			float off_x = dist * (mod(float(i), 2.0) - 0.5);
			float off_y = dist * (float(i / 2) - 0.5);
			fire_residual += texture2D(u_previous_frame, clamp(tex_coords + rise_offset + vec2(off_x, off_y), 0.0, 1.0)).r;
		}
		fire_residual /= 4.0;
		if(fire_residual != 0.0) {
			fire_residual -= residual_fire_fade_time * (1.0 + (noise_range * fade_max_variation));
		}

		fire_residual = min(fire_residual, max_residual);
		float output_fire = max(texture_raw.r * 1.0, fire_residual);


		gl_FragColor = vec4(output_fire, 0.0, 0.0, 1.0);
	}
}
