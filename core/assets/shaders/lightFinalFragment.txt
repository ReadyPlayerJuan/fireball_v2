varying vec2 v_texCoords;
varying vec4 v_color;


/*                              */
/*       NOISE GENERATION       */
/*                              */
vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2, p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}



/*                              */
/*         ACTUAL SCRIPT        */
/*                              */
uniform sampler2D u_texture;
uniform vec2 u_scale;
uniform float u_time;
//uniform float u_flicker;
uniform float u_max_darkness;
const float noise_magnification = 40.0;
const float max_read_shift_x = 0.0018;
const float max_read_shift_y = 0.0009;
const float read_shift_rise_speed = 2.0;
const float read_shift_noise_3d_speed = 3.0;

const float skew = 1.5;

void main()
{
	vec2 scaled_tex_coord = vec2(v_texCoords.x / u_scale.x, v_texCoords.y / u_scale.y) * noise_magnification;
	float noise_range = snoise(vec3(scaled_tex_coord + vec2(0.0, read_shift_rise_speed * u_time), u_time * read_shift_noise_3d_speed));
	float noise = (noise_range * 0.5) + 0.5;
	vec2 read_shift = vec2(max_read_shift_x * noise_range * u_scale.x, max_read_shift_y * noise_range * u_scale.y);

	float amount = texture2D(u_texture, clamp(v_texCoords + read_shift, 0.0, 1.0)).g;
	float flicker = 0.0;//pow(u_flicker, 3.0) * 0.3;
	//amount = smoothstep(bot_cutoff_max - (bot_cutoff_max * u_max_darkness), 1.0 - (top_cutoff + flicker), amount);
	amount = 1.0 - pow(1.0 - amount, skew);
    gl_FragColor = vec4(0.0, 0.0, 0.0, (1.0 - amount) * u_max_darkness);
    //gl_FragColor = vec4(vec3(amount), 1.0);
}