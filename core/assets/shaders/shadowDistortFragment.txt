#ifdef GL_ES
precision mediump float;
#endif

/*                              */
/*       NOISE GENERATION       */
/*                              */
vec3 mod289(vec3 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 mod289(vec4 x){return x-floor(x*(1.0/289.0))*289.0;}vec4 permute(vec4 x){return mod289(((x*34.0)+1.0)*x);}vec4 taylorInvSqrt(vec4 r){return 1.79284291400159-0.85373472095314*r;}float snoise(vec3 v){const vec2 C=vec2(1.0/6.0,1.0/3.0);const vec4 D=vec4(0.0,0.5,1.0,2.0);vec3 i=floor(v+dot(v,C.yyy));vec3 x0=v-i+dot(i,C.xxx);vec3 g=step(x0.yzx,x0.xyz);vec3 l=1.0-g;vec3 i1=min(g.xyz,l.zxy);vec3 i2=max(g.xyz,l.zxy);vec3 x1=x0-i1+C.xxx;vec3 x2=x0-i2+C.yyy;vec3 x3=x0-D.yyy;i=mod289(i);vec4 p=permute(permute(permute(i.z+vec4(0.0,i1.z,i2.z,1.0))+i.y+vec4(0.0,i1.y,i2.y,1.0))+i.x+vec4(0.0,i1.x,i2.x,1.0));float n_=0.142857142857;vec3 ns=n_*D.wyz-D.xzx;vec4 j=p-49.0*floor(p*ns.z*ns.z);vec4 x_=floor(j*ns.z);vec4 y_=floor(j-7.0*x_);vec4 x=x_*ns.x+ns.yyyy;vec4 y=y_*ns.x+ns.yyyy;vec4 h=1.0-abs(x)-abs(y);vec4 b0=vec4(x.xy,y.xy);vec4 b1=vec4(x.zw,y.zw);vec4 s0=floor(b0)*2.0+1.0;vec4 s1=floor(b1)*2.0+1.0;vec4 sh=-step(h,vec4(0.0));vec4 a0=b0.xzyw+s0.xzyw*sh.xxyy;vec4 a1=b1.xzyw+s1.xzyw*sh.zzww;vec3 p0=vec3(a0.xy,h.x);vec3 p1=vec3(a0.zw,h.y);vec3 p2=vec3(a1.xy,h.z);vec3 p3=vec3(a1.zw,h.w);vec4 norm=taylorInvSqrt(vec4(dot(p0,p0),dot(p1,p1),dot(p2, p2),dot(p3,p3)));p0*=norm.x;p1*=norm.y;p2*=norm.z;p3*=norm.w;vec4 m=max(0.6-vec4(dot(x0,x0),dot(x1,x1),dot(x2,x2),dot(x3,x3)),0.0);m=m*m;return 42.0*dot(m*m,vec4(dot(p0,x0),dot(p1,x1),dot(p2,x2),dot(p3,x3)));}



/*                              */
/*         ACTUAL SCRIPT        */
/*                              */

varying vec4 v_color;
varying vec2 v_texCoords;

uniform sampler2D u_texture;
uniform sampler2D u_light;
uniform vec2 u_viewport;
uniform vec2 u_camera_position;
uniform float u_time;
uniform float u_max_darkness;

const vec2 static_noise_magnification = vec2(0.05, 0.05);
const float min_static_shift_x = 1.4;
const float max_static_shift_x = 4.2;
const float min_static_shift_y = 1.6;
const float max_static_shift_y = 4.8;
const float static_noise_3d_speed = 4.0;

const vec2 blob_noise_magnification = vec2(150.0, 150.0);
const float blob_shift_x = 0.9;
const float blob_shift_y = 0.9;
const float blob_noise_3d_speed = 2.0;
const float darkness_pct_min = 0.15;

void main()
{
    vec2 u_scale = vec2(1.0) + 0.0 * u_viewport;

	float light_amount = 1.0 - (texture2D(u_light, v_texCoords).a * 1.0 / pow(u_max_darkness, 2.0));
	light_amount = clamp(light_amount * (1.0 + darkness_pct_min), 0.0, 1.0);
	float static_shift_x = mix(max_static_shift_x, min_static_shift_x, light_amount);
	float static_shift_y = mix(max_static_shift_y, min_static_shift_y, light_amount);



	vec2 world_position = vec2(v_texCoords.x * u_viewport.x, v_texCoords.y * u_viewport.y) + u_camera_position;
	vec2 static_scaled_tex_coord = vec2(static_noise_magnification.x * world_position.x, static_noise_magnification.y * world_position.y);
	float static_noise_range_x = snoise(vec3(static_scaled_tex_coord, u_time * static_noise_3d_speed));
	float static_noise_range_y = snoise(vec3(vec2(static_scaled_tex_coord.x * 1.1 + 150.0, static_scaled_tex_coord.y * 0.95 + 200.0), u_time * static_noise_3d_speed));

	vec2 static_shift = vec2((static_shift_x * static_noise_range_x) / u_viewport.x, (static_shift_y * static_noise_range_y) / u_viewport.y);


	/*
	vec2 blob_scaled_tex_coord = vec2(blob_noise_magnification.x * world_position.x / u_scale.x, blob_noise_magnification.y * world_position.y / u_scale.y);
	float blob_noise_range_x = snoise(vec3(blob_scaled_tex_coord, u_time * blob_noise_3d_speed));
	float blob_noise_range_y = snoise(vec3(vec2(blob_scaled_tex_coord.x * 1.1 + 150.0, blob_scaled_tex_coord.y * 0.95 + 200.0), u_time * blob_noise_3d_speed));

	vec2 blob_shift = vec2(blob_shift_x * blob_noise_range_x * u_scale.x, blob_shift_y * blob_noise_range_y * u_scale.y);
	*/vec2 blob_shift = vec2(0.0);


	float shadow_amount_noise_range = snoise(vec3(static_scaled_tex_coord, u_time * static_noise_3d_speed + vec2(10.0, 20.0)));
    vec4 read = texture2D(u_texture, clamp(v_texCoords + static_shift + blob_shift, 0.0, 1.0));
	//if(max(read.rgb) == 0.0) {
	//	discard;
	//}
	float shadow_amount = read.r;
	if(shadow_amount != 1.0) {
		shadow_amount += shadow_amount_noise_range * 0.15;
	}
	shadow_amount = mix(0.4, 1.1, shadow_amount);

	gl_FragColor = vec4(light_amount, mix(read.g - 0.2, read.g, shadow_amount), read.b, shadow_amount);//shadow_amount * 5.0);
	//gl_FragColor = vec4(static_shift, 0.0, 1.0);


}